// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        speed: { value: 0.0}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>
  #include <cc-global>
  #include <cc-local>
  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  uniform block{
    float speed;
  };
  #endif

  void main () {
    vec4 o = vec4(1, 1, 1, 1);
    vec2 uv = v_uv0;
    float mostX = 0.4;

    //模拟地平线效果
    uv.x+=(1.0-uv.y)*0.1;

    //计算近大远小
    if(uv.x<0.5){
      if(uv.x>( -0.4*uv.y+0.4)){
        uv.x = 0.5*(uv.x - ( -0.4*uv.y+0.4))/( 0.5 - ( -0.4*uv.y+0.4) );
      }else{
        discard;
      }
    }else{
     if(uv.x<( 0.4*uv.y+0.6)){
          uv.x = 0.5*(( 0.4*uv.y+0.6) - uv.x )/(  ( 0.4*uv.y+0.6)-0.5);
      }else{
        discard;
      }
    }

    //远处模糊效果
    if(fract(uv.y)<0.2){
     o.w *= uv.y/0.2;
    }

    //uv移动
    uv.y -= cc_time.x * speed;

    //取余
    uv.y = fract(uv.y);

    #if USE_TEXTURE
      CCTexture(texture, uv, o);
    #endif

    o *= v_color;

    

    ALPHA_TEST(o);

    #if USE_BGRA
      gl_FragColor = o.bgra;
    #else
      gl_FragColor = o.rgba;
    #endif
  }
}%
